{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "svcmerged.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "_61O20AmyovN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e351894-4980-4654-9030-53ac0d64ee56"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls '/content/drive/MyDrive/mami_data'"
      ],
      "metadata": {
        "id": "cvDUeIPhzkne",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7cca0486-beec-41d9-a21d-807b417be794"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test\t\ttest.zip  training.zip\t    trial\n",
            "test_pixel.csv\ttraining  train_pixel1.zip  trial.zip\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# import zipfile\n",
        " \n",
        "# zip_file = \"/content/drive/MyDrive/mami_data/training.zip\"\n",
        " \n",
        "# try:\n",
        "#     with zipfile.ZipFile(zip_file) as z:\n",
        "#         z.extractall(\"/content/drive/MyDrive/mami_data/training\")\n",
        "#         print(\"Extracted all\")\n",
        "# except:\n",
        "#     print(\"Invalid file\")"
      ],
      "metadata": {
        "id": "zfR8hO6JzuIL"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!ls '/content/drive/MyDrive/mami_data/training/TRAINING/training.csv'"
      ],
      "metadata": {
        "id": "TpVR7CfP0xSz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e25c589c-976c-46d2-8971-cba633def380"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/mami_data/training/TRAINING/training.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# import zipfile\n",
        " \n",
        "# zip_file = \"/content/drive/MyDrive/mami_data/trial.zip\"\n",
        " \n",
        "# try:\n",
        "#     with zipfile.ZipFile(zip_file) as z:\n",
        "#         z.setpassword(pwd = bytes('*MaMiSemEval2022!', 'utf-8'))\n",
        "#         z.extractall(\"/content/drive/MyDrive/mami_data/trial\")\n",
        "#         print(\"Extracted all\")\n",
        "# except:\n",
        "#     print(\"Invalid file\")"
      ],
      "metadata": {
        "id": "tr85tm9f0cGJ"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!ls '/content/drive/MyDrive/mami_data/trial/Users/fersiniel/Desktop/MAMI - TO LABEL/TRIAL DATASET'"
      ],
      "metadata": {
        "id": "UuozvFzf2wtU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "08238034-0195-4fbb-98ca-13336fd0fcb3"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1012.jpg  122.jpg   1380.jpg  191.jpg  349.jpg\t524.jpg  719.jpg  919.jpg\n",
            "1032.jpg  1236.jpg  1381.jpg  207.jpg  381.jpg\t525.jpg  739.jpg  922.jpg\n",
            "1047.jpg  1263.jpg  1384.jpg  216.jpg  383.jpg\t565.jpg  741.jpg  925.jpg\n",
            "104.jpg   126.jpg   1408.jpg  230.jpg  415.jpg\t571.jpg  788.jpg  960.jpg\n",
            "1078.jpg  1285.jpg  142.jpg   236.jpg  441.jpg\t576.jpg  822.jpg  977.jpg\n",
            "1094.jpg  1294.jpg  1440.jpg  246.jpg  442.jpg\t58.jpg\t 828.jpg  97.jpg\n",
            "1132.jpg  1309.jpg  156.jpg   247.jpg  447.jpg\t625.jpg  840.jpg  980.jpg\n",
            "1146.jpg  1310.jpg  157.jpg   274.jpg  448.jpg\t643.jpg  854.jpg  981.jpg\n",
            "1159.jpg  1327.jpg  161.jpg   282.jpg  482.jpg\t656.jpg  859.jpg  989.jpg\n",
            "1174.jpg  133.jpg   162.jpg   28.jpg   491.jpg\t666.jpg  865.jpg  trial.csv\n",
            "1175.jpg  1354.jpg  165.jpg   300.jpg  492.jpg\t670.jpg  872.jpg\n",
            "1181.jpg  1363.jpg  175.jpg   30.jpg   519.jpg\t700.jpg  899.jpg\n",
            "1229.jpg  1377.jpg  181.jpg   33.jpg   520.jpg\t717.jpg  89.jpg\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#import zipfile\n",
        " \n",
        "#zip_file = \"/content/drive/MyDrive/mami_data/test.zip\"\n",
        " \n",
        "#try:\n",
        "#   with zipfile.ZipFile(zip_file) as z:\n",
        "#       z.setpassword(pwd = bytes('*MaMiSemEval2022!', 'utf-8'))\n",
        "#        z.extractall(\"/content/drive/MyDrive/mami_data/test\")\n",
        "#        print(\"Extracted all\")\n",
        "#except:\n",
        "#    print(\"Invalid file\")"
      ],
      "metadata": {
        "id": "--9nVEFPb24m"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!ls '/content/drive/MyDrive/mami_data/test/test/Test.csv'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fEOtjiOUcIaB",
        "outputId": "33e58440-2308-44d3-d837-330b2d275724"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/mami_data/test/test/Test.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#!cp '/content/drive/MyDrive/mami_data/trial/Users/fersiniel/Desktop/MAMI - TO LABEL/TEST DATASET/test.csv' '/content/drive/MyDrive/mami_data/test'"
      ],
      "metadata": {
        "id": "L8PqiKbNcc8O"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!cp '/content/drive/MyDrive/mami_data/trial/Users/fersiniel/Desktop/MAMI - TO LABEL/TRIAL DATASET/trial.csv' '/content/drive/MyDrive/mami_data/trial'"
      ],
      "metadata": {
        "id": "Qr6W1D5NT4Tw"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "applying preprocessing with cleaningg tokenizing and lematization"
      ],
      "metadata": {
        "id": "xaGjc0Dm9zb7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "data1=pd.read_csv('/content/drive/MyDrive/mami_data/training/TRAINING/training.csv', sep='\\t')\n",
        "data2=pd.read_csv(\"/content/drive/MyDrive/mami_data/trial/trial.csv\",sep='\\t')\n",
        "#training_label=data['misogynous']\n",
        "# print(training_data.head())\n",
        "import re\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "stop_words=stopwords.words('english')\n",
        "stop_words.append('imgflipcom')\n",
        "stop_words.append('zip')\n",
        "print(stop_words)\n",
        "lemmatizer=WordNetLemmatizer()\n",
        "#training data\n",
        "for index,row in data1.iterrows():\n",
        "  #print(row)\n",
        "  filter_sentence=[]\n",
        "  sentence=row['Text Transcription']\n",
        "  sentence = sentence.lower()\n",
        "  #print(sentence)\n",
        "  sentence=re.sub(r'[^\\w\\s]','',sentence)#cleaning\n",
        "  words=nltk.word_tokenize(sentence)\n",
        "  words=[w for w in words if not w in stop_words]\n",
        "  for word in words:\n",
        "    filter_sentence.append(lemmatizer.lemmatize(word))\n",
        "  #print(filter_sentence)\n",
        "  listToStr = ' '.join([str(elem) for elem in filter_sentence])\n",
        "  data1.loc[index,\"Text Transcription\"]=listToStr\n",
        "#trail data\n",
        "for index,row in data2.iterrows():\n",
        "  #print(row)\n",
        "    filter_sentence=[]\n",
        "    sentence=row['Text Transcription']\n",
        "    sentence = sentence.lower()\n",
        "    #print(sentence)\n",
        "    sentence=re.sub(r'[^\\w\\s]','',sentence)#cleaning\n",
        "    words=nltk.word_tokenize(sentence)\n",
        "    words=[w for w in words if not w in stop_words]\n",
        "    for word in words:\n",
        "        filter_sentence.append(lemmatizer.lemmatize(word))\n",
        "    #print(filter_sentence)\n",
        "    listToStr = ' '.join([str(elem) for elem in filter_sentence])\n",
        "    data2.loc[index,\"Text Transcription\"]=listToStr\n",
        "print(data1.head())\n",
        "print(data1.shape)\n",
        "print(data2.head())\n",
        "print(data2.shape)\n",
        "#data=pd.concat([data1,data2])\n",
        "#print(data.head())\n",
        "#print(data.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NxnVQT-49x4t",
        "outputId": "ad6a6f4d-1042-4938-9bd1-bf85535913b3"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/wordnet.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn', \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\", 'imgflipcom', 'zip']\n",
            "   file_name  ...                                 Text Transcription\n",
            "0      1.jpg  ...                                       milk milkzip\n",
            "1     10.jpg  ...  rose red violet blue dont say yes ill rape qui...\n",
            "2   1000.jpg  ...  breaking news russia release photo donald trum...\n",
            "3  10000.jpg  ...                         man seeking woman ignad 18\n",
            "4  10006.jpg  ...  explaining deep lore jrr tolkeins world arda p...\n",
            "\n",
            "[5 rows x 7 columns]\n",
            "(10000, 7)\n",
            "  file_name  ...                                 Text Transcription\n",
            "0    28.jpg  ...  dad burn jon snow stop dad know happen becomes...\n",
            "1    30.jpg  ...  may mixcommunication decorator happy birthday ...\n",
            "2    33.jpg  ...                                 shouldnt sold boat\n",
            "3    58.jpg  ...                          bitch like fault made mad\n",
            "4    89.jpg  ...  find picture 4 girl together fb make comemnt t...\n",
            "\n",
            "[5 rows x 7 columns]\n",
            "(100, 7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "applying countvectorizer"
      ],
      "metadata": {
        "id": "LN9PMfX3-A4e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "count_vect = CountVectorizer()\n",
        "training_data=data1['Text Transcription']\n",
        "training_label=data1['misogynous']\n",
        "X_train_counts = count_vect.fit_transform(training_data)\n",
        "X_train_counts.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FomHOhINM42U",
        "outputId": "75e74f79-2e8e-4f05-8ff8-e659a6d827da"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000, 19444)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TF-IDF transormer"
      ],
      "metadata": {
        "id": "NSHLhC6WE4rD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfTransformer\n",
        "tfidf_transformer = TfidfTransformer()\n",
        "X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n",
        "X_train_tfidf.shape\n",
        "print(X_train_tfidf)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O2p2zHXfNrOp",
        "outputId": "fa02c2cb-fd25-4491-c53c-cef782bd9713"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  (0, 11442)\t0.7879253044232929\n",
            "  (0, 11439)\t0.6157708296513089\n",
            "  (1, 18984)\t0.28962909812577703\n",
            "  (1, 18159)\t0.4583683185518154\n",
            "  (1, 15063)\t0.23976302448187078\n",
            "  (1, 14813)\t0.37476642107115976\n",
            "  (1, 14317)\t0.3387610436157863\n",
            "  (1, 14172)\t0.2787488433987422\n",
            "  (1, 14047)\t0.24193181225027263\n",
            "  (1, 8973)\t0.29116452359050415\n",
            "  (1, 5850)\t0.20103050747836645\n",
            "  (1, 3264)\t0.363175278501251\n",
            "  (2, 17517)\t0.2386777592222515\n",
            "  (2, 14884)\t0.2909109150764501\n",
            "  (2, 14883)\t0.3038437075613974\n",
            "  (2, 14410)\t0.3104826967884022\n",
            "  (2, 13226)\t0.2503089050160738\n",
            "  (2, 12137)\t0.2437311037238636\n",
            "  (2, 11461)\t0.22694934847526524\n",
            "  (2, 8709)\t0.3782320382184436\n",
            "  (2, 8659)\t0.19124740135959634\n",
            "  (2, 7048)\t0.3782320382184436\n",
            "  (2, 5836)\t0.3038437075613974\n",
            "  (2, 3476)\t0.2847847272327219\n",
            "  (3, 18693)\t0.1802083929157495\n",
            "  :\t:\n",
            "  (9992, 6963)\t0.3355111732445286\n",
            "  (9992, 6635)\t0.25666922304696976\n",
            "  (9992, 5573)\t0.21614646793159017\n",
            "  (9992, 3618)\t0.3252673061288536\n",
            "  (9992, 3617)\t0.3472921175832567\n",
            "  (9993, 18745)\t0.6813897795695832\n",
            "  (9993, 13045)\t0.7319207390818453\n",
            "  (9994, 15743)\t0.6895254886346851\n",
            "  (9994, 3765)\t0.7242614172542252\n",
            "  (9995, 18271)\t0.557693579275479\n",
            "  (9995, 6358)\t0.5445517248795129\n",
            "  (9995, 4867)\t0.626451347325275\n",
            "  (9996, 18693)\t0.2883832276242732\n",
            "  (9996, 15792)\t0.7278287731048921\n",
            "  (9996, 2345)\t0.6221739234857355\n",
            "  (9997, 7891)\t0.3879206693147219\n",
            "  (9997, 7790)\t0.30183473580433395\n",
            "  (9997, 4787)\t0.6603241528032006\n",
            "  (9997, 2932)\t0.567789890544981\n",
            "  (9998, 18581)\t0.6353559705475232\n",
            "  (9998, 4751)\t0.7722193928474049\n",
            "  (9999, 19033)\t0.604218808490147\n",
            "  (9999, 17265)\t0.4762998426193861\n",
            "  (9999, 11653)\t0.4806799525716209\n",
            "  (9999, 10496)\t0.4207194725505814\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "clf = SVC().fit(X_train_tfidf, training_label)\n",
        "docs_new = [\"IT'S SUPER RARE TO FIND A'KITCHEN THAT HAS FOUR OVENS \"]\n",
        "X_new_counts = count_vect.transform(docs_new)\n",
        "X_new_tfidf = tfidf_transformer.transform(X_new_counts)\n",
        "predicted = clf.predict(X_new_tfidf)\n",
        "print(predicted)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "poFQg0d8ODXb",
        "outputId": "253bc30e-987a-4fa7-b52b-998d36c04c0b"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "import numpy as np\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import cross_val_score\n",
        "sns.countplot(training_label)\n",
        "text_clf = Pipeline([\n",
        "     ('vect', CountVectorizer()),\n",
        "     ('tfidf', TfidfTransformer()),\n",
        "     ('clf',SVC(gamma='auto')),\n",
        " ])\n",
        "scores=cross_val_score(text_clf,training_data,training_label,cv=10,scoring='accuracy')\n",
        "print(scores)\n",
        "print(scores.mean())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "A0a1o5neOg_o",
        "outputId": "e0276835-9a83-402e-bfc6-d45a1be3a921"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.618 0.599 0.602 0.605 0.607 0.595 0.597 0.608 0.592 0.585]\n",
            "0.6007999999999999\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "To find best parameter "
      ],
      "metadata": {
        "id": "eUvA-ZZxkQlI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "tuning hyper parameter using grid search cv"
      ],
      "metadata": {
        "id": "rUNpDgx3kxE9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "param_grid = {'C': [0.1, 1, 10],\n",
        "              'gamma': [1, 0.1, 0.01],\n",
        "              'kernel': ['rbf']}\n",
        "print(param_grid)\n",
        "clf=SVC()\n",
        "grid=GridSearchCV(clf,param_grid,cv=3,scoring='accuracy',n_jobs=-1)\n",
        "grid.fit(X_train_tfidf,training_label)\n",
        "#grid.grid_scores_\n",
        "grid.cv_results_\n",
        "means = grid.cv_results_['mean_test_score']\n",
        "params = grid.cv_results_['params']\n",
        "for mean,param in zip(means,params):\n",
        "    print(\"%f  with:   %r\" % (mean,param))\n",
        "grid.mean_scores=means\n",
        "print(grid.best_score_)\n",
        "print(grid.best_params_)\n",
        "print(grid.best_estimator_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6iYI9fhg1xCZ",
        "outputId": "15202b8e-4faf-4067-ad75-d4af1c2e668e"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'C': [0.1, 1, 10], 'gamma': [1, 0.1, 0.01], 'kernel': ['rbf']}\n",
            "0.655200  with:   {'C': 0.1, 'gamma': 1, 'kernel': 'rbf'}\n",
            "0.585000  with:   {'C': 0.1, 'gamma': 0.1, 'kernel': 'rbf'}\n",
            "0.530294  with:   {'C': 0.1, 'gamma': 0.01, 'kernel': 'rbf'}\n",
            "0.784399  with:   {'C': 1, 'gamma': 1, 'kernel': 'rbf'}\n",
            "0.756799  with:   {'C': 1, 'gamma': 0.1, 'kernel': 'rbf'}\n",
            "0.578599  with:   {'C': 1, 'gamma': 0.01, 'kernel': 'rbf'}\n",
            "0.781599  with:   {'C': 10, 'gamma': 1, 'kernel': 'rbf'}\n",
            "0.771799  with:   {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\n",
            "0.760499  with:   {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\n",
            "0.7843988058073954\n",
            "{'C': 1, 'gamma': 1, 'kernel': 'rbf'}\n",
            "SVC(C=1, gamma=1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#validation accuracy for training data\n",
        "clf=SVC(C=1, gamma=1)\n",
        "scores=cross_val_score(clf,X_train_tfidf,training_label,cv=3,scoring='accuracy')\n",
        "print(scores)\n",
        "print(scores.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-4FX4rW3r6fI",
        "outputId": "c8eee72c-d7ec-4752-c12a-2c34c936587c"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.79634073 0.78157816 0.77527753]\n",
            "0.7843988058073954\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#testing accuracy\n",
        "X_train=X_train_tfidf\n",
        "X_test=training_label\n",
        "y_train=data2['Text Transcription']\n",
        "y_test=data2['misogynous']\n",
        "text_clf = Pipeline([\n",
        "     ('vect', CountVectorizer()),\n",
        "     ('tfidf', TfidfTransformer()),\n",
        "     ('clf',SVC(C=1, gamma=1)),\n",
        " ])\n",
        "text_clf.fit(training_data, training_label)\n",
        "y_pred = text_clf.predict(y_train)\n",
        "metrics.accuracy_score(y_test,y_pred)\n",
        "metrics.confusion_matrix(y_test, y_pred)\n",
        "print(metrics.classification_report(y_test,y_pred\n",
        "     ))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uo70IJxYW8KB",
        "outputId": "54788cba-878f-4288-a72e-d0dfe61c3528"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.89      0.91        56\n",
            "           1       0.87      0.91      0.89        44\n",
            "\n",
            "    accuracy                           0.90       100\n",
            "   macro avg       0.90      0.90      0.90       100\n",
            "weighted avg       0.90      0.90      0.90       100\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c7582f78-f2d2-4417-9ac2-57fcb386275d",
        "id": "cvtpNh6kRwM-"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "OKO07VMM3dIo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78c77080-3892-41bb-c322-d544b3608836"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/drive/MyDrive/mami_data/train_pixel1.zip\n",
            "  inflating: train_pixel1.csv        \n"
          ]
        }
      ],
      "source": [
        "#!unzip /content/drive/MyDrive/mami_data/train_pixel1.zip\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "Al5ffMmXmoNK"
      },
      "outputs": [],
      "source": [
        "#!ls /content/drive/MyDrive/mami_data/training/TRAINING/"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "7mV2YTrU3dvs"
      },
      "outputs": [],
      "source": [
        "#!unzip -P *MaMiSemEval2022! /content/drive/MyDrive/mami_data/training/TRAINING/trial.zip\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "CRN7PUlV3ePC"
      },
      "outputs": [],
      "source": [
        "# !unzip -P *MaMiSemEval2022! /content/drive/MyDrive/mami_data/training/TRAINING/test.zip"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "first creating csv file with feature extraction from images and reading csv file"
      ],
      "metadata": {
        "id": "EOBFp4oFtFCy"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "KI58H8659GSM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8adc27e-af3d-434f-dbd9-e2d9a0375e06"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2000, 40000)\n",
            "(100, 40000)\n"
          ]
        }
      ],
      "source": [
        "#import glob\n",
        "import pandas as pd\n",
        "#import numpy as np\n",
        "from keras.preprocessing.image import img_to_array,array_to_img,load_img\n",
        "train_image = pd.read_csv('train_pixel1.csv',index_col=0)\n",
        "print(train_image.shape)\n",
        "test_image = pd.read_csv('/content/drive/MyDrive/mami_data/test_pixel.csv',index_col=0)\n",
        "print(test_image.shape)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "-57M-YyfUJde",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "875c367e-5777-40b1-c68e-e9c7196f0010"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0           1.jpg\n",
            "1          10.jpg\n",
            "2        1000.jpg\n",
            "3       10000.jpg\n",
            "4       10006.jpg\n",
            "          ...    \n",
            "9995    15002.jpg\n",
            "9996    15003.jpg\n",
            "9997    15004.jpg\n",
            "9998    15005.jpg\n",
            "9999    15006.jpg\n",
            "Name: file_name, Length: 10000, dtype: object\n"
          ]
        }
      ],
      "source": [
        "#reading training and testing datasets\n",
        "import pandas as pd\n",
        "total_data_train=pd.read_csv('/content/drive/MyDrive/mami_data/training/TRAINING/training.csv',sep='\\t')\n",
        "total_data_test=pd.read_csv('/content/drive/MyDrive/mami_data/trial/trial.csv',sep='\\t')\n",
        "print(total_data_train['file_name'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "WglRSqqKUolH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e6a807d9-93fa-45e4-a90f-44449d3b78e6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2000\n"
          ]
        }
      ],
      "source": [
        "#y_train is extracting from training dataset by checking filename and file_list\n",
        "import os\n",
        "file_list=os.listdir(r\"/content/drive/MyDrive/mami_data/training/TRAINING/training2_data/training/\")\n",
        "#print(file_list)\n",
        "y_train=[]\n",
        "for j in range(0,2001): \n",
        "  for i in range(len(total_data_train)):\n",
        "      if(file_list[j]==(total_data_train['file_name'][i])):\n",
        "        y_train.append(total_data_train['misogynous'][i])\n",
        "      else:\n",
        "        continue\n",
        "print(len(y_train))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "OQPRKTJRUqKc"
      },
      "outputs": [],
      "source": [
        "#y_test is extracting from training dataset by checking filename and file_list\n",
        "file_list2=os.listdir(r\"/content/drive/MyDrive/mami_data/trial/Users/fersiniel/Desktop/MAMI - TO LABEL/TRIAL DATASET/\")\n",
        "y_test=[]\n",
        "for j in file_list2: \n",
        "  for i in range(len(total_data_test)):\n",
        "      if(j==(total_data_test['file_name'][i])):\n",
        "        y_test.append(total_data_test['misogynous'][i])\n",
        "      else:\n",
        "        continue"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train=train_image#train_image is a feature extraction from image dataset\n",
        "X_test=test_image#train_image is a feature extraction from image dataset"
      ],
      "metadata": {
        "id": "2djncHh6lKYl"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "sm = SMOTE(random_state=42)\n",
        "X_train, y_train = sm.fit_resample(X_train, y_train)"
      ],
      "metadata": {
        "id": "ej_Lr-CB6gKS"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "SVC algorithm is applied to model"
      ],
      "metadata": {
        "id": "smvSfD0-xgpY"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 372
        },
        "outputId": "aa1b2607-bc3c-4f53-bb59-dd1cdf7a205b",
        "id": "_lkaGli4RwNH"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.55285313 0.53695042 0.53651685]\n",
            "3206\n",
            "0.5421068028855419\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import numpy as np\n",
        "from sklearn.svm import SVC\n",
        "import seaborn as sns\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import cross_val_score\n",
        "sns.countplot(y_train)\n",
        "clf=SVC(gamma='auto')\n",
        "scores=cross_val_score(clf,X_train,y_train,cv=3,scoring='accuracy')\n",
        "print(scores)\n",
        "print(len(X_train))\n",
        "print(scores.mean())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "03G2gyz1RwNH"
      },
      "source": [
        "To find best parameter "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "00qHvOvLRwNI"
      },
      "source": [
        "tuning hyper parameter using grid search cv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7df489d1-fb4d-4d45-9d9d-9316436df322",
        "id": "Da1OJGNDRwNI"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'C': [0.1, 1], 'gamma': [1, 0.1], 'kernel': ['rbf']}\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "param_grid = {'C': [0.1, 1],\n",
        "              'gamma': [1, 0.1],\n",
        "              'kernel': ['rbf']}\n",
        "print(param_grid)\n",
        "clf=SVC( )\n",
        "grid=GridSearchCV(clf,param_grid,cv=2,scoring='accuracy',n_jobs=-1)\n",
        "grid.fit(X_train,y_train)\n",
        "#grid.grid_scores_\n",
        "grid.cv_results_\n",
        "means = grid.cv_results_['mean_test_score']\n",
        "params = grid.cv_results_['params']\n",
        "#for mean,param in zip(means,params):\n",
        "#print(\"%f  with:   %r\" % (mean,param))\n",
        "grid.mean_scores=means\n",
        "\n",
        "print(grid.best_score_)\n",
        "print(grid.best_params_)\n",
        "print(grid.best_estimator_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5999e979-d1bb-4c1b-e1c4-adac386be140",
        "id": "Jl637bIbRwNJ"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.70560748 0.69422777 0.71762871 0.72386895 0.7425897 ]\n",
            "0.7167845218481637\n"
          ]
        }
      ],
      "source": [
        "clf=SVC(C=,gamma=,Kernel=)\n",
        "scores=cross_val_score(clf,X_train,y_train,cv=3,scoring='accuracy')\n",
        "print(scores)\n",
        "print(scores.mean())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "04dda5e0-badb-466e-ed10-7edcdbcf18b4",
        "id": "QLq6lTAIRwNJ"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.62      0.62        56\n",
            "           1       0.52      0.52      0.52        44\n",
            "\n",
            "    accuracy                           0.58       100\n",
            "   macro avg       0.57      0.57      0.57       100\n",
            "weighted avg       0.58      0.58      0.58       100\n",
            "\n"
          ]
        }
      ],
      "source": [
        "clf= SVC()\n",
        "clf.fit(X_train, y_train)\n",
        "y_pred = clf.predict(X_test)\n",
        "print(metrics.classification_report(y_test,y_pred))"
      ]
    }
  ]
}